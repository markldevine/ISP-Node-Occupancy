#!/usr/bin/env raku

use ISP::Server::Reporter;

class ISP-Node-Occupancy-statistics {

    constant \K     = 1024;
    constant \M     = K * 1024;
    constant \G     = M * 1024;
    constant \T     = G * 1024;
    constant \P     = T * 1024;

    has Rat $!bytes-sent            = 0.0;
    has Rat $.bytes-sent-delta      = 0.0;
    has Rat $!last-bytes-sent       = -1.0;

    method to-bytes (Str:D $num-unit) {
        if $num-unit ~~ / ^ (\d+ '.'* \d*) \s* (\w*) $ / {
            my $real    = $0.Str.comb.grep(/ \d | '.' /).join;
            my $unit    = $1.Str with $1;
            given $unit {
                when 'K'    { return $real * K }
                when 'M'    { return $real * M }
                when 'G'    { return $real * G }
                when 'T'    { return $real * T }
                when 'P'    { return $real * P }
                default     { return $real;    }
            }
        }
    }

    method bytes-to-unit (Real:D $real) {
        given $real {
            when $_ >= P    { return ($real / P).fmt("%.1f P"); }
            when $_ >= T    { return ($real / T).fmt("%.1f T"); }
            when $_ >= G    { return ($real / G).fmt("%.1f G"); }
            when $_ >= M    { return ($real / M).fmt("%.1f M"); }
            when $_ >= K    { return ($real / K).fmt("%.1f K"); }
            default         { return $real;                     }
        }
    }

    method bytes-sent (:$bytes-sent) {
        return $!bytes-sent         without $bytes-sent;
        my $real-bytes-sent         = self.to-bytes($bytes-sent).Rat;
        $!last-bytes-sent           = $real-bytes-sent unless $!last-bytes-sent >= 0.0;
        $!bytes-sent-delta          = $real-bytes-sent - $!last-bytes-sent;
        $!bytes-sent                = $real-bytes-sent;
        $!last-bytes-sent           = $real-bytes-sent;
    }

    has Rat $!bytes-received        = 0.0;
    has Rat $.bytes-received-delta  = 0.0;
    has Rat $!last-bytes-received   = -1.0;

    method bytes-received (:$bytes-received) {
        return $!bytes-received     without $bytes-received;
        my $real-bytes-received     = self.to-bytes($bytes-received).Rat;
        $!last-bytes-received       = $real-bytes-received unless $!last-bytes-received >= 0.0;
        $!bytes-received-delta      = $real-bytes-received - $!last-bytes-received;
        $!bytes-received            = $real-bytes-received;
        $!last-bytes-received       = $real-bytes-received;
    }
}

class Reporter does ISP::Server::Reporter {

    has %!statistics;

                   Node Name: DFS2K16-18
                        Type: Bkup
              Filespace Name: \\dfs2k16-18\e$
                        FSID: 2
           Storage Pool Name: DFS_DC
             Number of Files: 2,175,589
Physical Space Occupied (MB): -
 Logical Space Occupied (MB): 1,663,675.75

    method process-rows (@sessions) {
        my Str      $node-name;                                             #                   Node Name: NNNNNNNN18
        my Str      $type;                                                  #                        Type: Bkup
        my Str      $filespace-name;                                        #              Filespace Name: \\NNNNNNNN18\e$
        my Str      $fsid;                                                  #                        FSID: 2
        my Str      $storage-pool-name;                                     #           Storage Pool Name: NNN_DC
        my Str      $number-of-files;                                       #             Number of Files: 2,512,740
        my Str      $physical;                                              #Physical Space Occupied (MB): -
        my Str      $logical;                                               # Logical Space Occupied (MB): 1,955,623.38

        my $row;
        for @sessions -> $session {
            $node-name          = Nil;  $node-name          = $session{'Node Name'}.Str                     if $session{'Node Name'};
            $type               = Nil;  $type               = $session{'Type'}.Str                          if $session{'Type'};
            $filespace-name     = Nil;  $filespace-name     = $session{'Filespace Name'}.Str                if $session{'Filespace Name'};
            $fsid               = Nil;  $fsid               = $session{'FSID'}.Str                          if $session{'FSID'};
            $storage-pool-name  = Nil;  $storage-pool-name  = $session{'Storage Pool Name'}.Str             if $session{'Storage Pool Name'};
            $number-of-files    = Nil;  $number-of-files    = $session{'Number of Files'}.Str               if $session{'Number of Files'};
            $physical           = Nil;  $physical           = $session{'Physical Space Occupied (MB)'}.Str  if $session{'Physical Space Occupied (MB)'};
            $logical            = Nil;  $logical            = $session{'Logical Space Occupied (MB)'}.Str   if $session{'Logical Space Occupied (MB)'};
            %!statistics{$node-name}    = ISP-Sessions-statistics.new   unless %!statistics{$node-name}:exists;
            %!statistics{$node-name}.number-of-files(:$number-of-files);
            %!statistics{$node-name}.physical(:$physical);
            %!statistics{$node-name}.logical(:$logical);
            $row                            = Array.new;
            $row.push:                      $node-name;
            $row.push:                      $type;
            $row.push:                      $filespace-name;
            $row.push:                      $fsid;
            $row.push:                      $storage-pool-name;
            $row.push:                      $number-of-files;
            $row.push:                      %!statistics{$node-name}.bytes-to-unit(%!statistics{$node-name}.number-of-files-delta);
            $row.push:                      $physical;
            $row.push:                      %!statistics{$node-name}.bytes-to-unit(%!statistics{$node-name}.physical-delta);
            $row.push:                      $logical;
            $row.push:                      %!statistics{$node-name}.bytes-to-unit(%!statistics{$node-name}.logical-delta);
            self.table.add-row:             $row;
        }
    }
}

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP server name
    Int:D   :$interval      where * >= 5    = 58,   #= Refresh every --interval seconds (minimum 5s)
    Int:D   :$count                         = 1,    #= Number of refreshes (0 is infinity)
    Bool    :$grid,                                 #= Full table grid
    Bool    :$clear,                                #= Clear the screen with each iteration
    Bool    :$detailed,                             #= FORMAT=DETAILED
    Str     :$client-name,                          #= ISP CLIENT/NODE name
) {
    my @command     = ['QUERY', 'SESSION'];
    @command.push:  'FORMAT=DETAILED'   if $detailed;
    my @fields;
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Node Name'),                    :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Type'),                         :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Filespace Name'),               :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('FSID'),                         :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Storage Pool Name'),            :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Number of Files'),              :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Number of Files Δ'),          :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Physical (MB)'),                :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Physical Δ'),                 :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Logical (MB)'),                 :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Logical Δ'),                  :alignment('r'));
    my $reporter    = Reporter.new(
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$grid,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Occupancy'),
                                    :@command,
                                    :@fields,
                                    :$detailed,
                                    :$client-name,
                                    :sort-by('Node Name'),
                                  );
    $reporter.loop;
}

=finish
